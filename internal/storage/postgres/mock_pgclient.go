// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package postgres is a generated GoMock package.
package postgres

import (
	context "context"
	reflect "reflect"

	store "github.com/andreevym/metric-collector/internal/storage/store"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Backup mocks base method.
func (m *MockStorage) Backup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Backup indicates an expected call of Backup.
func (mr *MockStorageMockRecorder) Backup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockStorage)(nil).Backup))
}

// BackupPeriodically mocks base method.
func (m *MockStorage) BackupPeriodically() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupPeriodically")
	ret0, _ := ret[0].(error)
	return ret0
}

// BackupPeriodically indicates an expected call of BackupPeriodically.
func (mr *MockStorageMockRecorder) BackupPeriodically() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupPeriodically", reflect.TypeOf((*MockStorage)(nil).BackupPeriodically))
}

// Create mocks base method.
func (m_2 *MockStorage) Create(ctx context.Context, m *store.Metric) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), ctx, m)
}

// CreateAll mocks base method.
func (m *MockStorage) CreateAll(ctx context.Context, metrics map[string]store.MetricR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAll", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAll indicates an expected call of CreateAll.
func (mr *MockStorageMockRecorder) CreateAll(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAll", reflect.TypeOf((*MockStorage)(nil).CreateAll), ctx, metrics)
}

// Delete mocks base method.
func (m *MockStorage) Delete(ctx context.Context, id, mType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, mType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(ctx, id, mType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, id, mType)
}

// Read mocks base method.
func (m *MockStorage) Read(ctx context.Context, id, mType string) (*store.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, id, mType)
	ret0, _ := ret[0].(*store.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStorageMockRecorder) Read(ctx, id, mType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorage)(nil).Read), ctx, id, mType)
}

// Update mocks base method.
func (m_2 *MockStorage) Update(ctx context.Context, m *store.Metric) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, m)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplyMigration mocks base method.
func (m *MockClient) ApplyMigration(ctx context.Context, sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyMigration", ctx, sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyMigration indicates an expected call of ApplyMigration.
func (mr *MockClientMockRecorder) ApplyMigration(ctx, sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMigration", reflect.TypeOf((*MockClient)(nil).ApplyMigration), ctx, sql)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Delete mocks base method.
func (m *MockClient) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0, arg1, arg2)
}

// Insert mocks base method.
func (m_2 *MockClient) Insert(ctx context.Context, m *store.Metric) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Insert", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockClientMockRecorder) Insert(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockClient)(nil).Insert), ctx, m)
}

// Ping mocks base method.
func (m *MockClient) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping))
}

// SaveAll mocks base method.
func (m *MockClient) SaveAll(ctx context.Context, metrics map[string]store.MetricR) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockClientMockRecorder) SaveAll(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockClient)(nil).SaveAll), ctx, metrics)
}

// SelectByIDAndType mocks base method.
func (m *MockClient) SelectByIDAndType(ctx context.Context, id, mType string) (*store.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByIDAndType", ctx, id, mType)
	ret0, _ := ret[0].(*store.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByIDAndType indicates an expected call of SelectByIDAndType.
func (mr *MockClientMockRecorder) SelectByIDAndType(ctx, id, mType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByIDAndType", reflect.TypeOf((*MockClient)(nil).SelectByIDAndType), ctx, id, mType)
}

// Update mocks base method.
func (m *MockClient) Update(arg0 context.Context, arg1 *store.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), arg0, arg1)
}
