// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: metric_collector.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricCollector_Ping_FullMethodName    = "/proto.MetricCollector/Ping"
	MetricCollector_Updates_FullMethodName = "/proto.MetricCollector/Updates"
	MetricCollector_Update_FullMethodName  = "/proto.MetricCollector/Update"
	MetricCollector_Value_FullMethodName   = "/proto.MetricCollector/Value"
)

// MetricCollectorClient is the client API for MetricCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricCollectorClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Updates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*UpdatesResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Value(ctx context.Context, in *ValueRequest, opts ...grpc.CallOption) (*ValueResponse, error)
}

type metricCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricCollectorClient(cc grpc.ClientConnInterface) MetricCollectorClient {
	return &metricCollectorClient{cc}
}

func (c *metricCollectorClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, MetricCollector_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricCollectorClient) Updates(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*UpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatesResponse)
	err := c.cc.Invoke(ctx, MetricCollector_Updates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricCollectorClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, MetricCollector_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricCollectorClient) Value(ctx context.Context, in *ValueRequest, opts ...grpc.CallOption) (*ValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, MetricCollector_Value_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricCollectorServer is the server API for MetricCollector service.
// All implementations must embed UnimplementedMetricCollectorServer
// for forward compatibility.
type MetricCollectorServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Updates(context.Context, *UpdatesRequest) (*UpdatesResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Value(context.Context, *ValueRequest) (*ValueResponse, error)
	mustEmbedUnimplementedMetricCollectorServer()
}

// UnimplementedMetricCollectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricCollectorServer struct{}

func (UnimplementedMetricCollectorServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMetricCollectorServer) Updates(context.Context, *UpdatesRequest) (*UpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedMetricCollectorServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetricCollectorServer) Value(context.Context, *ValueRequest) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Value not implemented")
}
func (UnimplementedMetricCollectorServer) mustEmbedUnimplementedMetricCollectorServer() {}
func (UnimplementedMetricCollectorServer) testEmbeddedByValue()                         {}

// UnsafeMetricCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricCollectorServer will
// result in compilation errors.
type UnsafeMetricCollectorServer interface {
	mustEmbedUnimplementedMetricCollectorServer()
}

func RegisterMetricCollectorServer(s grpc.ServiceRegistrar, srv MetricCollectorServer) {
	// If the following call pancis, it indicates UnimplementedMetricCollectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricCollector_ServiceDesc, srv)
}

func _MetricCollector_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricCollector_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricCollector_Updates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).Updates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricCollector_Updates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).Updates(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricCollector_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricCollector_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricCollector_Value_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricCollectorServer).Value(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricCollector_Value_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricCollectorServer).Value(ctx, req.(*ValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricCollector_ServiceDesc is the grpc.ServiceDesc for MetricCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetricCollector",
	HandlerType: (*MetricCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MetricCollector_Ping_Handler,
		},
		{
			MethodName: "Updates",
			Handler:    _MetricCollector_Updates_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MetricCollector_Update_Handler,
		},
		{
			MethodName: "Value",
			Handler:    _MetricCollector_Value_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric_collector.proto",
}
